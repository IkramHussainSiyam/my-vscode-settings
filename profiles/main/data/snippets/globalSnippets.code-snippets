{
  "svelte components": {
    "prefix": "svc",
    "description": "svelte components",
    "scope": "svelte",
    "body": [
      "<script lang=\"${1:ts}\">",
      "  ",
      "</script>",
      "",
      "<div>",
      "  ${2:${TM_FILENAME_BASE}}",
      "</div>$0"
    ]
  },
  "solidjs effect": {
    "prefix": "soleff",
    "description": "solidjs effect",
    "scope": "javascript,javascriptreact,typescriptreact,typescript",
    "body": [
      "createEffect(() => {",
      "  $0",
      "});"
    ]
  },
  "const variable": {
    "prefix": "cns",
    "body": [
      "const ${1:variableName} = ${2:value};"
    ],
    "description": "const variable",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "Let Variable": {
    "prefix": "lt",
    "body": [
      "let ${1:varName} = ${0:value}"
    ],
    "description": "let variable",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "Array Syntax": {
    "prefix": "array",
    "body": [
      "const ${1:arrName} = [${0:arrVal}]"
    ],
    "description": "array",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "Object Syntax": {
    "prefix": "obj",
    "body": [
      "const ${1:objName} = {",
      "  ${2:key}: ${0:value},",
      "}"
    ],
    "description": "object",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "Regular Function": {
    "prefix": "rfn",
    "description": "regular function",
    "body": [
      "function ${1:funcName} (${2:param}) {",
      "  ${0:code...}",
      "}"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "Higher Order Function": {
    "scope": "javascript,javascriptreact,typescript,typescriptreact,svelte",
    "prefix": "hof",
    "description": "Higher Order Function",
    "body": [
      "function ${1:functionName}() {",
      "  return function () {",
      "    $0",
      "  };",
      "}"
    ]
  },
  "Async Higher Order Function": {
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "prefix": "ahof",
    "description": "Higher Order Function",
    "body": [
      "async function ${1:functionName}() {",
      "  return function () {",
      "    $0",
      "  };",
      "}"
    ]
  },
  "Async Regular Function": {
    "prefix": "arfn",
    "body": [
      "async function ${1:funcName}(${2:param}) {",
      "${0:code...}",
      "}",
      ""
    ],
    "description": "async Regular Function",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "Arrow Function": {
    "prefix": "afn",
    "description": "large arrow function",
    "body": [
      "const ${1:funcName} = (${2:param}) => {",
      "  ${0:code...}",
      "}"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "Async Arrow Function": {
    "prefix": "asafn",
    "description": "async arrow function",
    "body": [
      "const ${1:funcName} = async (${2:param}) => {",
      " ${0:value}",
      "}"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "Array.map()": {
    "prefix": "arrayMap",
    "description": "array map",
    "body": [
      "${1:item}s.map((${1:item})=>${2:value})"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "Array.filter()": {
    "prefix": "arrayFilter",
    "body": [
      "${1:item}s.filter((${1:item})=>${2:value})"
    ],
    "description": "array filter",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "Array.find()": {
    "prefix": "arrayFind",
    "body": [
      "${1:arr}.find((${2:element})=>${3:value})"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "Array.Reduce()": {
    "prefix": "arrayReduce",
    "description": "array reduce",
    "body": [
      "${1:arr}.reduce((${2:acc}, ${3:currVal}) => ${2:acc} + ${3:currVal}, ${0:initialVal})"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "Optional Chaining": {
    "prefix": "opc",
    "description": "optional chaining",
    "body": [
      "${1:condition} ? ${2:trueValue} : ${3:falseValue}"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "Optional (&&) chaining": {
    "prefix": "opnc",
    "description": "optional && chaining",
    "body": [
      "${1:condition} && ${0:trueValue}"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "Crypto Random UID": {
    "prefix": "crid",
    "description": "Crypto Random UID",
    "body": [
      "crypto.randomUUID()"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "Random UID": {
    "prefix": "rid",
    "description": "Random UID",
    "body": [
      "getRandomID()"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "useState": {
    "prefix": "usest",
    "body": [
      "const [${1:state}, set${1/(.*)/${1:/capitalize}/}] = useState$2(${3:initialValue})"
    ],
    "description": "useState",
    "scope": "javascript,javascriptreact"
  },
  "useStateTsx": {
    "prefix": "usest",
    "body": [
      "const [${1:state}, set${1/(.*)/${1:/capitalize}/}] = useState$2(${0:initialValue})"
    ],
    "description": "useState",
    "scope": "typescript,typescriptreact"
  },
  "solid state": {
    "prefix": "solst",
    "description": "solid state",
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "body": [
      "const [${1:signal}, set${1/(.*)/${1:/capitalize}/}] = createSignal$2(${0:initialValue})"
    ]
  },
  "useEffect": {
    "prefix": "useeff",
    "body": [
      "useEffect$1(() => {",
      "  ${0:code}",
      "  ",
      "}, [])"
    ],
    "description": "useEffect",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "useReducer": {
    "prefix": "usered",
    "body": [
      "const [state, dispatch] = useReducer$1(${2:reducerFunc}, ${0:initialValue})"
    ],
    "description": "useReducer",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "Custom useContext Hook": {
    "prefix": "cscon",
    "description": "custom useContext hook ",
    "body": [
      "const { ${0:values} } = use${1:ContextName}()"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "Context Api Snippet": {
    "prefix": "context",
    "body": [
      "import { createContext, useContext } from \"react\";",
      "",
      "export const ${1:ContextName}ContextsDefaultValue = {};",
      "",
      "export const ${1:ContextName}Context = createContext(${1:ContextName}ContextsDefaultValue);",
      "",
      "export default function ${1:ContextName}Provider({ children }) {",
      "  // ...$0",
      "",
      "  return <${1:ContextName}Context.Provider value={{}}>{children}</${1:ContextName}Context.Provider>;",
      "}",
      "",
      "export function use${1:ContextName}Context() {",
      "  const context = useContext(${1:ContextName}Context);",
      "  if (!context) {",
      "    throw new Error(\"use${1:ContextName}Context must be used within a ${1:ContextName}Provider!\");",
      "  }",
      "  return context;",
      "}",
      ""
    ],
    "description": "Context Api Snippet",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "useRefJSX": {
    "prefix": "useref",
    "body": [
      "const ${2:element} = useRef$1(${0:initialValue})"
    ],
    "description": "useRef",
    "scope": "javascript,javascriptreact"
  },
  "useRefTSX": {
    "prefix": "useref",
    "body": [
      "const ${2:element} = useRef$1<${4:elementName} | null>(${0:null})"
    ],
    "description": "useRef",
    "scope": "typescript,typescriptreact"
  },
  "Try & Catch Block": {
    "prefix": "trycatch",
    "body": [
      "try {",
      "  $0",
      "} catch (error) {",
      "  throw new Error(error)",
      "}"
    ],
    "description": "try catch block",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "case (switch Case's case command)": {
    "prefix": "case",
    "body": [
      "case ${1:caseType}:",
      "  return ${2:caseReturns}"
    ],
    "description": "case (switch Case's case command)",
    "scope": "javascript, javascriptreact"
  },
  "number with format": {
    "prefix": "formateNum",
    "body": [
      "new Intl.NumberFormat().format(${0:amount})"
    ],
    "description": "number with format",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "javascript fetch": {
    "prefix": "fetch",
    "body": [
      "const response = await fetch(\"$0\");",
      "const data = await response.json();",
      "return data;"
    ],
    "description": "javascript fetch",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "swc": {
    "prefix": "swc",
    "description": "swc",
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "body": [
      "switch (${2:switchCondition}) {",
      "  case ${3:caseValue}:",
      "    return ${4:caseReturn}",
      "  ",
      "  $0",
      "  ",
      "  default:",
      "    return ${1:defaultVal}",
      "}"
    ]
  },
  "React Regular Functional Component": {
    "prefix": "rfc",
    "body": [
      "export default function $1${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}() {",
      "  return (",
      "    <div>$1${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}</div>$0",
      "  )",
      "}",
      ""
    ],
    "description": "Creates a React Functional Component with ES7 module system",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "React Regular Async Functional Component": {
    "prefix": "arfc",
    "body": [
      "export default async function $1${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}() {",
      "  return (",
      "    <div>$1${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}</div>$0",
      "  )",
      "}",
      ""
    ],
    "description": "Creates a React Functional Component with ES7 module system",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "React Functional Component With Ref": {
    "prefix": "rfcwr",
    "body": [
      "import { forwardRef } from \"react\";",
      "",
      "function ${1:${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}}() {",
      "  return (",
      "    <div>${1:first}</div>$0",
      "  );",
      "}",
      "",
      "export default forwardRef(${1:second});"
    ],
    "description": "React Functional Component With Ref"
  },
  "React Funcional Arrow Component": {
    "prefix": "rfac",
    "description": "React Funcional Arrow Component",
    "body": [
      "const ${1:${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}} = () => {",
      "  return (",
      "    <>",
      "      <div>${1:first}$0</div>",
      "    </>",
      "  );",
      "};",
      "",
      "export default ${1:second};",
      ""
    ],
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "React Async Funcional Arrow Component": {
    "prefix": "arfac",
    "description": "React Async Funcional Arrow Component",
    "body": [
      "const ${1:${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}} = async () => {",
      "  return (",
      "    <>",
      "      <div>${1:first}$0</div>",
      "    </>",
      "  );",
      "};",
      "",
      "export default ${1:second};",
      ""
    ],
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "bullet comment": {
    "prefix": "blcm",
    "body": [
      "/**",
      " * $0",
      " */"
    ],
    "description": "bullet comment",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "big normal comment": {
    "prefix": "bcm",
    "body": [
      "// -------------------",
      "//  $0",
      "// -------------------"
    ],
    "description": "big normal comment",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "medium size comment": {
    "prefix": "mcm",
    "body": "// --- ${0:comment} --- //",
    "description": "description for medium size comment",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "useContext": {
    "prefix": "usecon",
    "body": [
      "const { ${0:values} } = useContext$1(${2:context})"
    ],
    "description": "useContext",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "render data conditionally from api": {
    "prefix": "renderData",
    "body": [
      "const render${1:ItemName} = () => {",
      "    switch (true) {",
      "      case isLoading:",
      "        return <Loading>Loading ${1:itemName}</Loading>;",
      "      case isError:",
      "        console.error(errorMsg);",
      "        return (",
      "          <ErrorMessage>An error occurred while fetching ${1:itemName}</ErrorMessage>",
      "        );",
      "      case ${1:ItemName}?.length === 0:",
      "        return <ErrorMessage>No ${1:itemName} found</ErrorMessage>;",
      "      default:",
      "        return (",
      "          <ul className=\"${1:itemName}-list\">",
      "            {${1:ItemName}?.map((job) => (",
      "              <${2:componentName} key={job.id} job={job} />",
      "            ))}",
      "          </ul>",
      "        );",
      "    }",
      "  };"
    ],
    "description": "render data conditionally from api"
  },
  "Custom Hook Syntax": {
    "prefix": "usechk",
    "body": [
      "const ${3:value} = use${1:HookName}($2)"
    ],
    "description": "custom hook",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "Create Custom Hook": {
    "prefix": "chk",
    "description": "create custom hook",
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "body": [
      "export default function use${1:HookName}() {",
      "  // code...$0",
      "",
      "  return;",
      "}",
      ""
    ]
  },
  "localStorage getitem": {
    "prefix": "locget",
    "body": [
      "JSON.parse(localStorage.getItem('${1:key}'))"
    ],
    "description": "localStorage getitem",
    "scope": "javascript, javascriptreact, typescript, typescriptreact"
  },
  "localStorage setitem": {
    "prefix": "locset",
    "body": [
      "localStorage.setItem('${1:key}', JSON.stringify(${2:value}))"
    ],
    "description": "localStorage setitem",
    "scope": "javascript, javascriptreact, typescript, typescriptreact"
  },
  "prisma mongodb id": {
    "prefix": "prisId",
    "body": [
      "id   String @id @default(auto()) @map(\"_id\") @db.ObjectId"
    ],
    "description": "prisma mongodb id",
    "scope": "prisma"
  },
  "Next.js Layout Component": {
    "prefix": "nextlayout",
    "body": [
      "import type { Metadata } from \"next\";",
      "",
      "export const metadata: Metadata = {",
      "  title: \"${2:title}\",",
      "};",
      "",
      "export default function ${1:Name}Layout({",
      "  children,",
      "}: {",
      "  children: React.ReactNode;",
      "}) {",
      "  return <div>$0{children}</div>;",
      "}",
      ""
    ],
    "description": "Next.js Layout Component"
  },
  "nextjs middleware template": {
    "prefix": "nextmiddle",
    "body": [
      "import { NextRequest, NextResponse } from \"next/server\";",
      "",
      "export const middleware = (req: NextRequest) => {",
      "  return NextResponse.next();",
      "};",
      "",
      "export const config = {",
      "  matcher: [\"/\"],",
      "};",
      ""
    ],
    "description": "nextjs middleware template"
  },
  "next.js generateMetadata": {
    "prefix": "genmeta",
    "body": [
      "export async function generateMetadata({ params }: { params: { id: string } }) {",
      "  return {",
      "    title: \"\",",
      "  };",
      "}"
    ],
    "description": "next.js generateMetadata",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "Radix Theme Snippet": {
    "prefix": "radix css config",
    "body": [
      "@import \"@radix-ui/themes/styles.css\";",
      "@tailwind base;",
      "@tailwind components;",
      "@tailwind utilities;",
      "@import \"react-toastify/dist/ReactToastify.css\";",
      "",
      ".radix-themes {",
      "    --default-font-family: var(--font-inter);",
      "}"
    ],
    "description": "Radix UI Theme CSS snippet template",
    "scope": "css, html"
  },
  "next.js metadata object": {
    "prefix": "nextmeta",
    "body": [
      "export const metadata: Metadata$1 = {",
      "  title: \"$0\",",
      "}"
    ],
    "description": "next.js metadata object",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "tsx component props": {
    "prefix": "cmprops",
    "body": [
      "React.ComponentProps<\"${1:element}\"> & "
    ],
    "description": "tsx component props",
    "scope": "typescript,typescriptreact"
  },
  "click event js": {
    "prefix": "event",
    "body": [
      "${1:variableName}.addEventListener('$2', function () {",
      "\t$0",
      "})"
    ],
    "description": "click event js",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "useSearchParams": {
    "prefix": "usesp",
    "body": [
      "const [${1:searchParams}, set${1/(.*)/${1:/capitalize}/}] = useSearchParams$3(${2:initialValue})"
    ],
    "description": "useSearchParams",
    "scope": "javascript,javascriptreact"
  },
  "React Styles Import": {
    "prefix": "imps",
    "body": [
      "import styles from '$0'"
    ],
    "description": "react styles import",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "nextjsUseClientCommand": {
    "prefix": "usecli",
    "description": "nextjsUseClientCommand",
    "body": [
      "\"use client\""
    ],
    "scope": "typescript,typescriptreact"
  },
  "nextjsUseServerCommand": {
    "prefix": "useserv",
    "description": "nextjsUseServerCommand",
    "body": [
      "\"use server\""
    ],
    "scope": "typescript,typescriptreact"
  },
  "reducer function for Redux/useReducer": {
    "prefix": "reducerFunc",
    "body": [
      "const ${1:reducer} = (${2:state}, action) => {",
      "  switch (action.type) {",
      "    case ${3:case}:",
      "      return $0",
      "",
      "    default:",
      "      return state;",
      "  }",
      "};"
    ],
    "description": "reducer function",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "useReduxStates Custom Hook": {
    "prefix": "useredx",
    "body": [
      "const [${2:stateName}, dispatch] = useReduxStates(${1:selector})"
    ],
    "description": "useReduxStates Custom Hook",
    "scope": "javascript, javascriptreact"
  },
  "redux store jsx": {
    "prefix": "rdxstore",
    "body": [
      "import { configureStore } from \"@reduxjs/toolkit\";",
      "",
      "const ${1:reduxStore} = configureStore({",
      "  reducer: {",
      "    ${0:// reducers..}",
      "  },",
      "});",
      "",
      "export default ${1:reduxStore};",
      ""
    ],
    "description": "redux store jsx",
    "scope": "javascript, javascriptreact"
  },
  "redux store nextjs": {
    "prefix": "rdxstore",
    "body": [
      "import { configureStore } from \"@reduxjs/toolkit\";",
      "",
      "const reduxStore = configureStore({",
      "  reducer: {",
      "    // reducers..",
      "  },",
      "});",
      "",
      "export default reduxStore;",
      "",
      "export type RootState = ReturnType<typeof reduxStore.getState>;",
      "export type AppDispatch = typeof reduxStore.dispatch;",
      ""
    ],
    "description": "redux store nextjs",
    "scope": "typescript, typescriptreact"
  },
  "rtk query api slice": {
    "prefix": "rtkapislice",
    "body": [
      "import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";",
      "",
      "const notebookApi = createApi({",
      "  reducerPath: \"\",",
      "  tagTypes: [\"\"],",
      "  baseQuery: fetchBaseQuery({",
      "    baseUrl: \"\",",
      "  }),",
      "  endpoints: (builder) => ({",
      "    getNotebooks: builder.query({",
      "      query: () => ({",
      "        url: \"/notebooks\",",
      "        method: \"GET\",",
      "      }),",
      "      providesTags: [\"Notebooks\"],",
      "    }),",
      "  }),",
      "});",
      "",
      "export default notebookApi;",
      ""
    ],
    "description": "rtk query api slice",
    "scope": "typescript, typescriptreact"
  },
  "redux useDispatch": {
    "prefix": "usedisp",
    "body": [
      "const dispatch = useDispatch$1()$0"
    ],
    "description": "redux useDispatch",
    "scope": "javascript, javascriptreact"
  },
  "redux useDispatch ts": {
    "prefix": "usedisp",
    "body": [
      "const dispatch = useDispatch$1()$0"
    ],
    "description": "redux useDispatch ts",
    "scope": "typescript, typescriptreact"
  },
  "react router navigate": {
    "prefix": "usenav",
    "body": [
      "const navigate = useNavigate$1()$0"
    ],
    "description": "react router navigate",
    "scope": "javascript, javascriptreact"
  },
  "react router navigate ts": {
    "prefix": "usenav",
    "body": [
      "const navigate = useNavigate$1()$0"
    ],
    "description": "react router navigate ts",
    "scope": "typescript, typescriptreact"
  },
  "redux toolkit slice": {
    "prefix": "rtkslice",
    "body": [
      "import { createSlice } from \"@reduxjs/toolkit\";",
      "",
      "const initialState = {",
      "  // initialStates",
      "};",
      "",
      "const ${1:featureName}Slice = createSlice({",
      "  name: \"${1:sliceName}\",",
      "  initialState,",
      "  reducers: {",
      "    ${0:// reducers}",
      "  },",
      "});",
      "",
      "export const ${1:featureName}Reducer = ${1:featureName}Slice.reducer;",
      "export const ${1:featureName}Actions = ${1:featureName}Slice.actions;",
      ""
    ],
    "description": "redux toolkit slice",
    "scope": "javascript, javascriptreact"
  },
  "redux toolkit slice ts": {
    "prefix": "rtkslice",
    "body": [
      "import { createSlice } from \"@reduxjs/toolkit\";",
      "",
      "const initialState = {",
      "  // initialStates",
      "};",
      "",
      "const ${1:featureName}Slice = createSlice({",
      "  name: \"${2:sliceName}\",",
      "  initialState,",
      "  reducers: {",
      "    ${0:// reducers}",
      "  },",
      "});",
      "",
      "// export",
      "const ${1:featureName}Reducer = ${1:featureName}Slice.reducer;",
      "export const ${1:featureName}Actions = ${1:featureName}Slice.actions;",
      "export default ${1:featureName}Reducer",
      ""
    ],
    "description": "redux toolkit slice ts",
    "scope": "typescript, typescriptreact"
  },
  "redux toolkit query slice": {
    "prefix": "rtkqslice",
    "body": [
      "import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";",
      "",
      "const ${1:sliceName}Slice = createApi({",
      "  reducerPath: \"${3:reducerPathName}\",",
      "  baseQuery: fetchBaseQuery({",
      "    baseUrl: \"${2:url}\",",
      "  }),",
      "});",
      "",
      "export default ${1:sliceName}Slice;",
      ""
    ],
    "description": "redux toolkit query slice",
    "scope": "javascript, javascriptreact"
  },
  "redux useSelector": {
    "prefix": "usesel",
    "body": [
      "const ${3:selector} = useSelector$1(${2:state});"
    ],
    "description": "redux useSelector",
    "scope": "javascript, javascriptreact"
  },
  "redux useSelector ts": {
    "prefix": "usesel",
    "body": [
      "const ${3:selector} = useSelector$1(${2:state});"
    ],
    "description": "redux useSelector ts",
    "scope": "typescript, typescriptreact"
  },
  "redux middleware": {
    "prefix": "midw",
    "body": [
      "const ${1:middleware} = (store) => (next) => (action) => {",
      "  ${0:// code}",
      "}"
    ],
    "description": "redux middleware",
    "scope": "javascript, javascriptreact"
  },
  "redux query hook": {
    "prefix": "usertkhk",
    "body": [
      "const { $4 } = ${1:sliceName}.${2:hookName}($3);"
    ],
    "description": "redux query hook",
    "scope": "javascript, javascriptreact"
  },
  "ReactFunctionalClientComponent": {
    "prefix": "rfcc",
    "body": [
      "\"use client\"",
      "",
      "export default function $1${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}() {",
      "  return (",
      "    <div>$1${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}</div>",
      "  )",
      "}",
      ""
    ],
    "description": "ReactFunctionalClientComponent",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "NextJS getServerSideProps React FC": {
    "prefix": "nextpage",
    "scope": "javascript, javascriptreact",
    "body": [
      "export default function ${1:${TM_FILENAME_BASE}}Page({",
      "\tpageComponentProps",
      "}) {",
      "\treturn (",
      "\t\t<PageComponent {...pageComponentProps}>",
      "\t\t\t<${1:${TM_FILENAME_BASE}}PageComponent",
      "\t\t\t/>",
      "\t\t</PageComponent>",
      "\t)",
      "}\n",
      "export async function getServerSideProps(ctx) {",
      "\treturn {",
      "\t\tprops: {",
      "\t\t\tpageComponentProps",
      "\t\t}",
      "\t}",
      "}"
    ],
    "description": "Next JS Page Component and SSR"
  },
  "Custom _document Component": {
    "prefix": "nextdocument",
    "scope": "javascript, javascriptreact",
    "body": [
      "import Document, { Html, Head, Main, NextScript } from 'next/document'\n",
      "class MyDocument extends Document {",
      "\tstatic async getInitialProps(ctx) {",
      "\t\tconst initalProps = await Document.getInitialProps(ctx)\n",
      "\t\treturn initalProps",
      "\t}\n",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<Html>",
      "\t\t\t\t<Head>",
      "\t\t\t\t\t${1}",
      "\t\t\t\t</Head>",
      "\t\t\t\t<body>",
      "\t\t\t\t\t<Main />",
      "\t\t\t\t\t<NextScript />",
      "\t\t\t\t</body>",
      "\t\t\t</Html>",
      "\t\t)",
      "\t}",
      "}\n",
      "export default MyDocument"
    ],
    "description": "Custom document component Next JS"
  },
  "Custom _app Component": {
    "prefix": "nextapp",
    "scope": "javascript, javascriptreact",
    "body": [
      "import '../styles.css'\n",
      "export default function MyApp({ Component, pageProps }) {",
      "\treturn (",
      "\t\t<Component {...pageProps} />",
      "\t)",
      "}\n"
    ],
    "description": "Custom app component Next JS"
  },
  "Default error Component": {
    "prefix": "nexterrordefault",
    "scope": "javascript, javascriptreact",
    "body": [
      "import Error from 'next'\n",
      "export async function getServerSideProps() {",
      "\tconst res = await fetch('https://api.github.com/repos/vercel/next.js')",
      "\tconst errorCode = res.ok ? false : res.statusCode",
      "\tconst json = await res.json()\n",
      "\treturn {",
      "\t\tprops: { errorCode, stars: json.stargazers_count }",
      "\t}",
      "}\n",
      "export default function Page({ errorCode, stars }) {",
      "\tif (errorCode) {",
      "\t\treturn <Error statusCode={errorCode} />",
      "\t}\n",
      "\treturn <div>Next stars: {stars}</div>",
      "}"
    ],
    "description": "If you want to render the built-in error page you can by importing the `Error` component. <b>IMPORTANT:</b> if you have a custom `Error` component be sure to import that one instead. <br/>`next/error` exports the default component used by Next.js."
  },
  "Custom error Component": {
    "prefix": "nexterrorcustom",
    "scope": "javascript, javascriptreact",
    "body": [
      "export default function Error({ statusCode }) {",
      "\treturn (",
      "\t\t<p>",
      "\t\t\t{statusCode",
      "\t\t\t\t? `An error \\${statusCode} occurred on server`",
      "\t\t\t\t: 'An error occurred on client'",
      "\t\t\t}",
      "\t\t</p>",
      "\t)",
      "}\n",
      "Error.getInitialProps = ({ res, err, ...context }) => {",
      "\tif(res) {",
      "\t\treturn { statusCode: res.statusCode }",
      "\t}",
      "\treturn { statusCode: err ? err.statusCode :400 }",
      "}\n"
    ],
    "description": "Custom error component Next JS. You must create a file \"_error.js\" inside your \"pages\" folder"
  },
  "Custom 404 NotFound Page": {
    "prefix": "next404",
    "scope": "javascript, javascriptreact",
    "body": [
      "${1}// pages/404.jsx",
      "export default function Custom404() {",
      "\treturn (",
      "\t\t<>",
      "\t\t\t<h1>404 - Page Not Found</h1>",
      "\t\t</>",
      "\t)",
      "}"
    ],
    "description": "Custom 404 page NotFound. You must create a 404.jsx file inside \"page\" folder"
  },
  "Custom 500 ServerError Page": {
    "prefix": "next500",
    "scope": "javascript, javascriptreact",
    "body": [
      "${1}// pages/500.jsx",
      "export default function Custom500() {",
      "\treturn (",
      "\t\t<>",
      "\t\t\t<h1>500 - Server-side error occurred</h1>",
      "\t\t</>",
      "\t)",
      "}"
    ],
    "description": "Custom 500 page for server-side error. You must create a 500.jsx file inside \"page\" folder"
  },
  "Async function getServerSideProps": {
    "prefix": "nextgetSSRProps",
    "scope": "javascript, javascriptreact",
    "body": [
      "// You should use getServerSideProps when:",
      "// - Only if you need to pre-render a page whose data must be fetched at request time",
      "export const getServerSideProps = async (ctx) => {",
      "\tconst { data } = await ${1} // your fetch function here \n",
      "\treturn {",
      "\t\tprops: {",
      "\t\t\t${2}",
      "\t\t}",
      "\t}",
      "}"
    ],
    "description": "Async function getServerSideProps - (Server-side Rendering): Fetch data on each request."
  },
  "Async function getStaticProps": {
    "prefix": "nextgetStaticProps",
    "scope": "javascript, javascriptreact",
    "body": [
      "// You should use getStaticProps when:",
      "//- The data required to render the page is available at build time ahead of a user’s request.",
      "//- The data comes from a headless CMS.",
      "//- The data can be publicly cached (not user-specific).",
      "//- The page must be pre-rendered (for SEO) and be very fast — getStaticProps generates HTML and JSON files, both of which can be cached by a CDN for performance.",
      "export const getStaticProps = async (ctx) => {",
      "\tconst { data } = await ${1} // your fetch function here \n",
      "\treturn {",
      "\t\tprops: {",
      "\t\t\t${2}",
      "\t\t}",
      "\t}",
      "}"
    ],
    "description": "Async function getStaticProps - (Static Generation): Fetch data at build time."
  },
  "Async function getStaticPaths": {
    "prefix": "nextgetStaticPaths",
    "scope": "javascript, javascriptreact",
    "body": [
      "// You should use getStaticPaths if you’re statically pre-rendering pages that use dynamic routes",
      "export const getStaticPaths = async (ctx) => {",
      "\tconst { data } = await ${1} // your fetch function here \n",
      "\treturn {",
      "\t\tpaths: [",
      "\t\t\t{",
      "\t\t\t\tparams: {",
      "\t\t\t\t\t${2}",
      "\t\t\t\t}",
      "\t\t\t}",
      "\t\t],",
      "\t\tfallback: ${3|\"blocking\",true,false|}",
      "\t}",
      "}"
    ],
    "description": "Async function getStaticPaths - (Static Generation): Specify dynamic routes to pre-render pages based on data."
  },
  "API Routes": {
    "prefix": "nextapi",
    "scope": "javascript, javascriptreact",
    "body": [
      "export default function ${1}(req, res) {",
      "\tres.status(200).json({ name: 'Example' })",
      "}"
    ],
    "description": "Next JS simple api routes"
  },
  "Dynamic imports": {
    "prefix": "nextdynamic",
    "scope": "javascript, javascriptreact",
    "body": [
      "import dynamic from 'next/dynamic'\n",
      "const DynamicComponent = dynamic(() => import('../components/${1}Component'))"
    ],
    "description": "A dynamic imports is a good way to split your code into manageable chunks."
  },
  "Dynamic imports with custom loading": {
    "prefix": "nextdynamicloading",
    "scope": "javascript, javascriptreact",
    "body": [
      "import dynamic from 'next/dynamic'\n",
      "const DynamicComponentWithCustomLoading = dynamic(",
      "\t() => import('../components/${1}Component'),",
      "\t{ loading: () => <p>${2}My Custom Loading</p> }",
      ")"
    ],
    "description": "In cases where you want to overwrite a Loading Component while using dynamic imports."
  },
  "Dynamic imports without SSR": {
    "prefix": "nextdynamicnossr",
    "scope": "javascript, javascriptreact",
    "body": [
      "import dynamic from 'next/dynamic'\n",
      "const DynamicComponentWithNoSSR = dynamic(",
      "\t() => import('../components/${1}Component'),",
      "\t{ ssr: false }",
      ")"
    ],
    "description": "In cases where you don't want import on server-side (SSR) while using dynamic imports."
  },
  "Import useRouter": {
    "prefix": "imrouter",
    "scope": "javascript, javascriptreact",
    "body": [
      "import { useRouter } from 'next/router'\n"
    ],
    "description": "Import useRouter"
  },
  "Import Next Link Component": {
    "prefix": "imlink",
    "scope": "javascript, javascriptreact",
    "body": [
      "import Link from 'next/link'\n"
    ],
    "description": "Import Next Link Component"
  },
  "Import Next Image Component": {
    "prefix": "imimg",
    "scope": "javascript, javascriptreact",
    "body": [
      "import Image from 'next/image'\n"
    ],
    "description": "Import Next Image Component"
  },
  "Import Next Head Component": {
    "prefix": "imhead",
    "scope": "javascript, javascriptreact",
    "body": [
      "import Head from 'next/head'\n"
    ],
    "description": "Import Next Head Component"
  },
  "Use Next Image Component": {
    "prefix": "nextimage",
    "scope": "javascript, javascriptreact",
    "body": [
      "<Image${1}",
      "\twidth={${2}}",
      "\theight={${2}}",
      "\tobjectFit=\"cover\"",
      "\tsrc={${3}}",
      "\talt=\"${4}\"",
      "/>"
    ],
    "description": "Use Next Image Component"
  },
  "Use Next Link Component": {
    "prefix": "nextlink",
    "scope": "javascript, javascriptreact",
    "body": [
      "<Link${1} href=\"${2}\">",
      "  ${3}",
      "</Link$>"
    ],
    "description": "Use Next Link Component"
  },
  "next/navigation useRouter": {
    "prefix": "userout",
    "scope": "typescript, typescriptreact, javascript, javascriptreact",
    "body": [
      "const route = useRouter${0}()"
    ],
    "description": "next/navigation useRouter"
  },
  "NextJS getServerSideProps React FC Typescript": {
    "prefix": "nextpage",
    "scope": "typescript, typescriptreact",
    "body": [
      "import { GetServerSidePropsContext, InferGetServerSidePropsType } from 'next'\n",
      "export default function ${1:${TM_FILENAME_BASE}}Page({",
      "\tpageComponentProps",
      "}: InferGetServerSidePropsType<typeof getServerSideProps>) {",
      "\treturn (",
      "\t\t<PageComponent {...pageComponentProps}>",
      "\t\t\t<${1:${TM_FILENAME_BASE}}PageComponent",
      "\t\t\t/>",
      "\t\t</PageComponent>",
      "\t)",
      "}\n",
      "export async function getServerSideProps(ctx: GetServerSidePropsContext) {",
      "\treturn {",
      "\t\tprops: {",
      "\t\t\tpageComponentProps",
      "\t\t}",
      "\t}",
      "}"
    ],
    "description": "Next JS Page Component with TS and SSR"
  },
  "Custom _document Component Typescript": {
    "prefix": "nextdocument",
    "scope": "typescript, typescriptreact",
    "body": [
      "import Document, { DocumentContext, Html, Head, Main, NextScript } from 'next/document'\n",
      "class MyDocument extends Document {",
      "\tstatic async getInitialProps(ctx: DocumentContext) {",
      "\t\tconst initalProps = await Document.getInitialProps(ctx)\n",
      "\t\treturn initalProps",
      "\t}\n",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<Html>",
      "\t\t\t\t<Head>",
      "\t\t\t\t\t${1}",
      "\t\t\t\t</Head>",
      "\t\t\t\t<body>",
      "\t\t\t\t\t<Main />",
      "\t\t\t\t\t<NextScript />",
      "\t\t\t\t</body>",
      "\t\t\t</Html>",
      "\t\t)",
      "\t}",
      "}\n",
      "export default MyDocument"
    ],
    "description": "Custom document component Next JS"
  },
  "Custom _app Component Typescript": {
    "prefix": "nextapp",
    "scope": "typescript, typescriptreact",
    "body": [
      "import type { AppProps } from 'next/app'\n",
      "import '../styles.css'\n",
      "export default function MyApp({ Component, pageProps }: AppProps): JSX.Element {",
      "\treturn (",
      "\t\t<Component {...pageProps} />",
      "\t)",
      "}\n"
    ],
    "description": "Custom app component Next JS"
  },
  "Default error Component Typescript": {
    "prefix": "nexterrordefault",
    "scope": "typescript, typescriptreact",
    "body": [
      "import Error from 'next'\n",
      "export async function getServerSideProps() {",
      "\tconst res = await fetch('https://api.github.com/repos/vercel/next.js')",
      "\tconst errorCode = res.ok ? false : res.statusCode",
      "\tconst json = await res.json()\n",
      "\treturn {",
      "\t\tprops: { errorCode, stars: json.stargazers_count }",
      "\t}",
      "}\n",
      "export default function Page({ errorCode, stars }) {",
      "\tif (errorCode) {",
      "\t\treturn <Error statusCode={errorCode} />",
      "\t}\n",
      "\treturn <div>Next stars: {stars}</div>",
      "}"
    ],
    "description": "If you want to render the built-in error page you can by importing the `Error` component. <b>IMPORTANT:</b> if you have a custom `Error` component be sure to import that one instead. <br/>`next/error` exports the default component used by Next.js."
  },
  "Custom error Component Typescript": {
    "prefix": "nexterrorcustom",
    "scope": "typescript, typescriptreact",
    "body": [
      "import { NextPageContext } from 'next'\n",
      "export default function Error({ statusCode }: { statusCode: number }) {",
      "\treturn (",
      "\t\t<p>",
      "\t\t\t{statusCode",
      "\t\t\t\t? `An error \\${statusCode} occurred on server`",
      "\t\t\t\t: 'An error occurred on client'",
      "\t\t\t}",
      "\t\t</p>",
      "\t)",
      "}\n",
      "Error.getInitialProps = ({ res, err, ...context }: NextPageContext) => {",
      "\tif(res) {",
      "\t\treturn { statusCode: res.statusCode }",
      "\t}",
      "\treturn { statusCode: err ? err.statusCode :400 }",
      "}\n"
    ],
    "description": "Custom error component Next JS. You must create a file \"_error.ts\" inside your \"pages\" folder"
  },
  "Custom 404 NotFound Page Typescript": {
    "prefix": "next404",
    "scope": "typescript, typescriptreact",
    "body": [
      "${1}// pages/404.tsx",
      "export default function Custom404() {",
      "\treturn (",
      "\t\t<>",
      "\t\t\t<h1>404 - Page Not Found</h1>",
      "\t\t</>",
      "\t)",
      "}"
    ],
    "description": "Custom 404 page NotFound. You must create a 404.tsx file inside \"page\" folder"
  },
  "Custom 500 ServerError Page Typescript": {
    "prefix": "next500",
    "scope": "typescript, typescriptreact",
    "body": [
      "${1}// pages/500.tsx",
      "export default function Custom500() {",
      "\treturn (",
      "\t\t<>",
      "\t\t\t<h1>500 - Server-side error occurred</h1>",
      "\t\t</>",
      "\t)",
      "}"
    ],
    "description": "Custom 500 page for server-side error. You must create a 500.tsx file inside \"page\" folder"
  },
  "Async function getServerSideProps Typescript": {
    "prefix": "nextgetSSRProps",
    "scope": "typescript, typescriptreact",
    "body": [
      "// You should use getServerSideProps when:",
      "// - Only if you need to pre-render a page whose data must be fetched at request time",
      "import { GetServerSideProps } from 'next'\n",
      "export const getServerSideProps: GetServerSideProps = async (ctx) => {",
      "\tconst { data } = await ${1} // your fetch function here \n",
      "\treturn {",
      "\t\tprops: {",
      "\t\t\t${2}",
      "\t\t}",
      "\t}",
      "}"
    ],
    "description": "Async function getServerSideProps - (Server-side Rendering): Fetch data on each request."
  },
  "Async function getStaticProps Typescript": {
    "prefix": "nextgetStaticProps",
    "scope": "typescript, typescriptreact",
    "body": [
      "// You should use getStaticProps when:",
      "//- The data required to render the page is available at build time ahead of a user’s request.",
      "//- The data comes from a headless CMS.",
      "//- The data can be publicly cached (not user-specific).",
      "//- The page must be pre-rendered (for SEO) and be very fast — getStaticProps generates HTML and JSON files, both of which can be cached by a CDN for performance.",
      "import { GetStaticProps } from 'next'\n",
      "export const getStaticProps: GetStaticProps = async (ctx) => {",
      "\tconst { data } = await ${1} // your fetch function here \n",
      "\treturn {",
      "\t\tprops: {",
      "\t\t\t${2}",
      "\t\t}",
      "\t}",
      "}"
    ],
    "description": "Async function getStaticProps - (Static Generation): Fetch data at build time."
  },
  "Async function getStaticPaths Typescript": {
    "prefix": "nextgetStaticPaths",
    "scope": "typescript, typescriptreact",
    "body": [
      "// You should use getStaticPaths if you’re statically pre-rendering pages that use dynamic routes",
      "import { GetStaticPaths } from 'next'\n",
      "export const getStaticPaths: GetStaticPaths = async (ctx) => {",
      "\tconst { data } = await ${1} // your fetch function here \n",
      "\treturn {",
      "\t\tpaths: [",
      "\t\t\t{",
      "\t\t\t\tparams: {",
      "\t\t\t\t\t${2}",
      "\t\t\t\t}",
      "\t\t\t}",
      "\t\t],",
      "\t\tfallback: ${3|\"blocking\",true,false|}",
      "\t}",
      "}"
    ],
    "description": "Async function getStaticPaths - (Static Generation): Specify dynamic routes to pre-render pages based on data."
  },
  "API Routes Typescript": {
    "prefix": "nextapi",
    "scope": "typescript, typescriptreact",
    "body": [
      "import type { NextApiRequest, NextApiResponse } from 'next'\n",
      "type ${1}Data = {",
      "\t${2}name: string",
      "}\n",
      "export default function ${3}(req: NextApiRequest, res: NextApiResponse<${1}Data>) {",
      "\tres.status(200).json({ ${2}name: 'Example' })",
      "}"
    ],
    "description": "Next JS simple api routes with TS"
  },
  "Dynamic imports Typescript": {
    "prefix": "nextdynamic",
    "scope": "typescript, typescriptreact",
    "body": [
      "import dynamic from 'next/dynamic'\n",
      "const DynamicComponent = dynamic(() => import('../components/${1}Component'))"
    ],
    "description": "A dynamic imports is a good way to split your code into manageable chunks."
  },
  "Dynamic imports with custom loading Typescript": {
    "prefix": "nextdynamicloading",
    "scope": "typescript, typescriptreact",
    "body": [
      "import dynamic from 'next/dynamic'\n",
      "const DynamicComponentWithCustomLoading = dynamic(",
      "\t() => import('../components/${1}Component'),",
      "\t{ loading: () => <p>${2}My Custom Loading</p> }",
      ")"
    ],
    "description": "In cases where you want to overwrite a Loading Component while using dynamic imports."
  },
  "Dynamic imports without SSR Typescript": {
    "prefix": "nextdynamicnossr",
    "scope": "typescript, typescriptreact",
    "body": [
      "import dynamic from 'next/dynamic'\n",
      "const DynamicComponentWithNoSSR = dynamic(",
      "\t() => import('../components/${1}Component'),",
      "\t{ ssr: false }",
      ")"
    ],
    "description": "In cases where you don't want import on server-side (SSR) while using dynamic imports."
  },
  "Import useRouter Typescript": {
    "prefix": "imrouter",
    "scope": "typescript, typescriptreact",
    "body": [
      "import { useRouter } from 'next/router'\n"
    ],
    "description": "Import useRouter"
  },
  "Import Next Link Component Typescript": {
    "prefix": "imlink",
    "scope": "typescript, typescriptreact",
    "body": [
      "import Link from 'next/link'\n"
    ],
    "description": "Import Next Link Component"
  },
  "Import Next Image Component Typescript": {
    "prefix": "imimg",
    "scope": "typescript, typescriptreact",
    "body": [
      "import Image from 'next/image'\n"
    ],
    "description": "Import Next Image Component"
  },
  "Import Next Head Component Typescript": {
    "prefix": "imhead",
    "scope": "typescript, typescriptreact",
    "body": [
      "import Head from 'next/head'\n"
    ],
    "description": "Import Next Head Component"
  },
  "Use Next Image Component Typescript": {
    "prefix": "nextimage",
    "scope": "typescript, typescriptreact",
    "body": [
      "<Image${1}",
      "\twidth={${2}}",
      "\theight={${2}}",
      "\tobjectFit=\"cover\"",
      "\tsrc={${3}}",
      "\talt=\"${4}\"",
      "/>"
    ],
    "description": "Use Next Image Component"
  },
  "Use Next Link Component Typescript": {
    "prefix": "nextlink",
    "scope": "typescript, typescriptreact",
    "body": [
      "<Link${1} href=\"${2}\">",
      "  ${3}",
      "</Link$>"
    ],
    "description": "Use Next Link Component"
  },
  "javascript console log": {
    "scope": "javascriptreact,javascript,typescriptreact,typescript",
    "prefix": "clg",
    "description": "javascript console log",
    "body": [
      "console.log($0)"
    ]
  },
  "javascript console error": {
    "scope": "javascriptreact,javascript,typescriptreact,typescript",
    "prefix": "cle",
    "description": "javascript console error",
    "body": [
      "console.error($0)"
    ]
  },
  "javascript console dir": {
    "scope": "javascriptreact,javascript,typescriptreact,typescript",
    "prefix": "cld",
    "description": "javascript console dir",
    "body": [
      "console.dir($0)"
    ]
  },
  "impms": {
    "scope": "javascriptreact",
    "prefix": "impms",
    "description": "import framer motion",
    "body": [
      "import { motion } from \"framer-motion\";"
    ]
  },
  "React styled component": {
    "scope": "javascriptreact,typescriptreact,javascript,typescript",
    "prefix": "stc",
    "description": "React styled component",
    "body": [
      "import styled from \"styled-components\";",
      "",
      "const ${1:${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}} = styled.${2:div}`",
      "  $0",
      "`;",
      "",
      "export default ${1:first};"
    ]
  },
  "Svelte State": {
    "scope": "svelte, javascript, typescript",
    "prefix": "svst",
    "description": "Svelte State ",
    "body": [
      "let ${1:stateName} = $$state(${2:initialValue})",
      ""
    ]
  },
  "Svelte Derived State": {
    "scope": "svelte, javascript, typescript",
    "prefix": "svdr",
    "description": "Svelte Derived State ",
    "body": [
      "let ${1:derivedName} = $$derived(${2:dependentState});",
      ""
    ]
  },
  "svelte effect": {
    "scope": "svelte, javascript, typescript",
    "prefix": "sveff",
    "description": "Svelte effect",
    "body": [
      "$$effect(() => {",
      "  $0",
      "});"
    ]
  },
  "svelte props": {
    "scope": "svelte, javascript, typescript",
    "prefix": "svpr",
    "description": "Svelte props",
    "body": [
      "let { $0 } = $$props()"
    ]
  },
  "svelte if block": {
    "scope": "svelte",
    "prefix": "if",
    "body": [
      "{#if ${1:condition}}",
      "  ${2:content}",
      "{/if}"
    ],
    "description": "svelte if block"
  },
  "svelte else block": {
    "scope": "svelte",
    "prefix": "else",
    "description": "svelte else block",
    "body": [
      "{:else}",
      "  ${1:content}"
    ]
  },
  "svelte else if block": {
    "scope": "svelte",
    "prefix": "else if",
    "description": "svelte else if block",
    "body": [
      "{:else if ${1:condition}}",
      "  ${2:content}"
    ]
  },
  "svelte each loop": {
    "scope": "svelte",
    "prefix": "each",
    "description": "svelte each loop",
    "body": [
      "{#each ${1:items} as ${2:item} (${3:itemId})}",
      "  $0",
      "{/each}"
    ]
  }
}